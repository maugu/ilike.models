/***data***/
Data data()
{
  RandomNumberGenerator rng;
  rng.seed(1);
  size_t n = 100;
  arma::colvec sampled = rnorm(rng,n);
  Data data;
  data["y"] = sampled;
  return data;
}

/***evaluate_log_prior***/
double evaluate_log_prior(const Parameters &parameters)
{
  return dlnorm(parameters["tau"][0], 1.0, 1.0);
}

/***simulate_prior***/
Parameters simulate_prior(RandomNumberGenerator &rng)
{
  Parameters output;
  output["tau"] = rlnorm(rng, 1.0, 1.0);
  return output;
}

//#

/***simulate_data_model***/
Data simulate_data_model(RandomNumberGenerator &rng,
                    const Parameters &parameters)
{
  size_t n = 100;
  arma::colvec sampled = rnorm(rng,n);
  Data data;
  data["y"] = sampled;
  return data;
}

/***sbi_likelihood,ilike::abc_euclidean_uniform(sd,1,epsilon,25,false)***/

/***summary_statistics***/
Data summary_stats(const Data &data)
{
  arma::mat sd = arma::stddev(data["y"]);
  return Data("sd",sd);
}

//#

/***evaluate_log_importance_proposal***/
double evaluate_log_importance_proposal(const Parameters &parameters)
{
  return dgamma(parameters["tau"][0], 0.1, 0.1);
}

/***simulate_importance_proposal***/
Parameters simulate_importance_proposal(RandomNumberGenerator &rng)
{
  Parameters output;
  output["tau"] = rgamma(rng, 0.1, 0.1);
  return output;
}

//#

/***simulate_mh_proposal***/
Parameters simulate_mh_proposal(RandomNumberGenerator &rng,
                                const Parameters &parameters)
{
  Parameters output;
  output["tau"] = rnorm(rng,parameters["tau"][0],0.001);
  return output;
}

/***evaluate_log_mh_proposal***/
double some_function(const Parameters &proposed_parameters,
                     const Parameters &parameters)
{
  return dnorm(proposed_parameters["tau"][0],parameters["tau"][0],0.001);
}

//#

/***mcmc_weights,c(1)***/

/***mcmc_termination,ilike::iterations(1000)***/
